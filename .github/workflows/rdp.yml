name: 🖥️ Free Windows RDP - PlayIt.gg

on:
  workflow_dispatch:
  push:
    branches: [ main, master ]

jobs:
  rdp:
    runs-on: windows-latest
    timeout-minutes: 360  # 6 hours maximum

    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4

    - name: 🔧 Enable RDP Service
      run: |
        Write-Host "🚀 Setting up Windows RDP..."

        # Enable Remote Desktop
        Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -name "fDenyTSConnections" -Value 0

        # Enable RDP through Windows Firewall
        Enable-NetFirewallRule -DisplayGroup "Remote Desktop"

        # Disable Network Level Authentication for easier connection
        Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -name "UserAuthentication" -Value 0

        # Set strong password for runneradmin user
        Set-LocalUser -Name "runneradmin" -Password (ConvertTo-SecureString -AsPlainText "RDP@GitHub2024!" -Force)

        # Add to Remote Desktop Users group
        Add-LocalGroupMember -Group "Remote Desktop Users" -Member "runneradmin" -ErrorAction SilentlyContinue

        Write-Host "✅ RDP enabled successfully!"

    - name: 📦 Download PlayIt.gg
      run: |
        Write-Host "📥 Downloading PlayIt.gg tunnel..."
        $url = "https://playit.gg/downloads/playit-win_64.exe"
        try {
            Invoke-WebRequest -Uri $url -OutFile "playit.exe" -UseBasicParsing
            Write-Host "✅ PlayIt.gg downloaded successfully!"
        } catch {
            Write-Host "❌ Failed to download PlayIt.gg, trying alternative..."
            # Alternative download method
            $webClient = New-Object System.Net.WebClient
            $webClient.DownloadFile($url, "playit.exe")
            Write-Host "✅ PlayIt.gg downloaded via alternative method!"
        }

    - name: 🌐 Start PlayIt Tunnel
      run: |
        Write-Host "🌐 Starting PlayIt tunnel for RDP..."

        # Start PlayIt in background
        $process = Start-Process -FilePath ".\playit.exe" -ArgumentList "tcp", "3389" -PassThru -WindowStyle Hidden

        Write-Host "⏳ Waiting for tunnel to establish..."
        Start-Sleep -Seconds 15

        Write-Host "🔗 PlayIt tunnel should be running!"
        Write-Host "📋 Check the Actions log for the tunnel URL"

    - name: 📦 Install Useful Software
      run: |
        Write-Host "📦 Installing useful software..."

        # Install Chocolatey
        Set-ExecutionPolicy Bypass -Scope Process -Force
        [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072
        iex ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))

        # Refresh PATH
        $env:Path = [System.Environment]::GetEnvironmentVariable("Path","Machine") + ";" + [System.Environment]::GetEnvironmentVariable("Path","User")

        # Install essential software
        $packages = @("googlechrome", "firefox", "vscode", "git", "python", "nodejs", "7zip", "notepadplusplus")
        foreach ($package in $packages) {
            try {
                choco install $package -y --no-progress --limit-output
                Write-Host "✅ Installed $package"
            } catch {
                Write-Host "❌ Failed to install $package"
            }
        }

        Write-Host "✅ Software installation completed!"

    - name: 📊 System Information
      run: |
        Write-Host "=================================="
        Write-Host "🖥️  SYSTEM INFORMATION"
        Write-Host "=================================="
        Write-Host "💻 OS: $(Get-ComputerInfo | Select-Object -ExpandProperty WindowsProductName)"
        Write-Host "🧠 RAM: $([math]::Round((Get-ComputerInfo).TotalPhysicalMemory / 1GB, 2)) GB"
        Write-Host "⚡ CPU: $(Get-ComputerInfo | Select-Object -ExpandProperty CsProcessors | Select-Object -First 1 -ExpandProperty Name)"
        Write-Host "💾 Disk: $([math]::Round((Get-PSDrive C | Select-Object -ExpandProperty Free) / 1GB, 2)) GB Free"
        Write-Host "🌐 IP: $(Invoke-RestMethod -Uri 'https://api.ipify.org' -ErrorAction SilentlyContinue)"
        Write-Host "=================================="

    - name: 🔑 Display Connection Details
      run: |
        Write-Host "=================================="
        Write-Host "🖥️  RDP CONNECTION DETAILS"
        Write-Host "=================================="
        Write-Host "👤 Username: runneradmin"
        Write-Host "🔑 Password: RDP@GitHub2024!"
        Write-Host "🌐 Tunnel: Check PlayIt.gg output above"
        Write-Host "=================================="
        Write-Host "📝 Instructions:"
        Write-Host "1. Copy the tunnel URL from PlayIt output"
        Write-Host "2. Use any RDP client to connect"
        Write-Host "3. Enter the credentials above"
        Write-Host "=================================="
        Write-Host "⏰ Session Duration: 6 hours maximum"
        Write-Host "🔄 Re-run this workflow for new session"
        Write-Host "=================================="

    - name: 🔄 Keep Session Active
      run: |
        Write-Host "🟢 Session is now active!"
        Write-Host "⏰ Started at: $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')"
        Write-Host "🛑 Click 'Cancel workflow' to stop the session"
        Write-Host ""

        $startTime = Get-Date
        $endTime = $startTime.AddHours(6)

        while ((Get-Date) -lt $endTime) {
            $remaining = $endTime - (Get-Date)
            $hours = [math]::Floor($remaining.TotalHours)
            $minutes = $remaining.Minutes

            Write-Host "🟢 Session Active - Time Remaining: $hours hours $minutes minutes"

            # Show some activity every 5 minutes
            Start-Sleep -Seconds 300
        }

        Write-Host "⏰ 6-hour limit reached. Session ending..."
        Write-Host "🔄 Run the workflow again for a new session!"
