name: 🖥️ Free Windows Desktop - VNC TigerVNC

on: 
  workflow_dispatch:

jobs:
  desktop:
    runs-on: windows-latest
    timeout-minutes: 360
    
    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4
      
    - name: 🟢 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        
    - name: 📦 Install LocalTunnel
      run: |
        Write-Host "📦 Installing LocalTunnel..."
        npm install -g localtunnel
        Write-Host "✅ LocalTunnel installed!"
      
    - name: 🔧 Enable RDP (Backup)
      run: |
        Write-Host "🚀 Setting up Windows..."
        Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -name "fDenyTSConnections" -Value 0
        Enable-NetFirewallRule -DisplayGroup "Remote Desktop"
        Set-LocalUser -Name "runneradmin" -Password (ConvertTo-SecureString -AsPlainText "TigerVNC123!" -Force)
        Write-Host "✅ Windows ready!"

    - name: 🖥️ Setup TightVNC Server
      run: |
        Write-Host "🖥️ Setting up VNC Server for TigerVNC..."
        
        # Download TightVNC
        $vncUrl = "https://www.tightvnc.com/download/2.8.81/tightvnc-2.8.81-gpl-setup-64bit.msi"
        Write-Host "📥 Downloading TightVNC..."
        Invoke-WebRequest -Uri $vncUrl -OutFile "tightvnc.msi" -UseBasicParsing -TimeoutSec 120
        
        # Install TightVNC
        Write-Host "🔧 Installing TightVNC..."
        Start-Process msiexec.exe -Wait -ArgumentList '/i', 'tightvnc.msi', '/quiet', '/norestart', 'ADDLOCAL="Server"', 'SERVER_REGISTER_AS_SERVICE=1', 'SERVER_ADD_FIREWALL_EXCEPTION=1', 'SET_USEVNCAUTHENTICATION=1', 'VALUE_OF_USEVNCAUTHENTICATION=1', 'SET_PASSWORD=1', 'VALUE_OF_PASSWORD=tigervnc'
        
        # Start VNC service
        Start-Service "tvnserver"
        Write-Host "✅ TightVNC Server started on port 5900!"

    - name: 📦 Download PlayIt.gg
      run: |
        Write-Host "📥 Downloading PlayIt.gg for TCP tunneling..."
        
        # Try multiple PlayIt.gg sources
        $urls = @(
            "https://github.com/playit-cloud/playit-agent/releases/latest/download/playit-windows-amd64.exe",
            "https://playit.gg/downloads/playit-win_64.exe"
        )
        
        $downloaded = $false
        foreach ($url in $urls) {
            try {
                Write-Host "Trying: $url"
                Invoke-WebRequest -Uri $url -OutFile "playit.exe" -UseBasicParsing -TimeoutSec 60
                Write-Host "✅ PlayIt.gg downloaded from: $url"
                $downloaded = $true
                break
            } catch {
                Write-Host "❌ Failed: $url"
            }
        }
        
        if (-not $downloaded) {
            Write-Host "⚠️ PlayIt download failed, will use SSH tunnel as backup"
        }

    - name: 🌐 Start VNC Tunnel with PlayIt
      run: |
        Write-Host "🌐 Starting VNC tunnel for TigerVNC..."
        
        if (Test-Path "playit.exe") {
            Write-Host "🚀 Starting PlayIt tunnel for VNC port 5900..."
            
            # Start PlayIt for VNC port 5900
            $playitProcess = Start-Process -FilePath ".\playit.exe" -ArgumentList "tcp", "5900" -PassThru -WindowStyle Hidden
            
            Write-Host "⏳ Waiting for PlayIt tunnel to establish..."
            Start-Sleep -Seconds 25
            
            Write-Host "🔗 PlayIt tunnel started for VNC port 5900!"
            Write-Host "📋 Check PlayIt.gg logs above for connection details"
            Write-Host "🐅 Use the PlayIt URL with TigerVNC Viewer"
            
        } else {
            Write-Host "⚠️ PlayIt not available, using SSH tunnel backup..."
            
            # Backup: SSH tunnel via serveo.net
            $randomPort = Get-Random -Minimum 15900 -Maximum 16900
            $subdomain = "tigervnc-$(Get-Random -Min 1000 -Max 9999)"
            
            Write-Host "🔧 Setting up SSH tunnel..."
            Write-Host "🔗 Tunnel: $subdomain.serveo.net:$randomPort"
            
            try {
                # SSH tunnel for VNC
                Start-Process -FilePath "ssh" -ArgumentList "-o", "StrictHostKeyChecking=no", "-R", "$subdomain`:5900:localhost:5900", "serveo.net" -WindowStyle Hidden
                
                Write-Host "✅ SSH Tunnel established!"
                Write-Host "🔗 VNC Server: $subdomain.serveo.net:5900"
                Write-Host "📋 For TigerVNC: $subdomain.serveo.net:5900"
                
            } catch {
                Write-Host "❌ SSH tunnel failed"
                Write-Host "🔄 Use RDP instead: Check LocalTunnel output below"
                
                # Fallback to RDP tunnel
                $rdpSubdomain = "rdp-backup-$(Get-Random -Min 1000 -Max 9999)"
                Start-Process -FilePath "cmd" -ArgumentList "/c", "lt --port 3389 --subdomain $rdpSubdomain" -WindowStyle Hidden
                Start-Sleep -Seconds 10
                Write-Host "🔄 RDP Backup: https://$rdpSubdomain.loca.lt"
            }
        }

    - name: 📊 System Information
      run: |
        Write-Host "=================================="
        Write-Host "🖥️  SYSTEM INFORMATION"
        Write-Host "=================================="
        Write-Host "💻 OS: $(Get-ComputerInfo | Select-Object -ExpandProperty WindowsProductName)"
        Write-Host "🧠 RAM: $([math]::Round((Get-ComputerInfo).TotalPhysicalMemory / 1GB, 2)) GB"
        Write-Host "⚡ CPU: $(Get-ComputerInfo | Select-Object -ExpandProperty CsProcessors | Select-Object -First 1 -ExpandProperty Name)"
        Write-Host "💾 Disk: $([math]::Round((Get-PSDrive C | Select-Object -ExpandProperty Free) / 1GB, 2)) GB Free"
        Write-Host "=================================="

    - name: 🔑 TigerVNC Connection Details
      run: |
        Write-Host "=================================="
        Write-Host "🐅  TIGERVNC CONNECTION DETAILS"
        Write-Host "=================================="
        Write-Host "🔑 VNC Password: tigervnc"
        Write-Host "=================================="
        Write-Host "📝 Connection Methods:"
        Write-Host ""
        Write-Host "🥇 Method 1 - PlayIt.gg (Best):"
        Write-Host "   Check PlayIt logs above for tunnel URL"
        Write-Host "   Use that URL in TigerVNC Viewer"
        Write-Host "   Password: tigervnc"
        Write-Host ""
        Write-Host "🥈 Method 2 - SSH Tunnel:"
        Write-Host "   Check SSH tunnel output above"
        Write-Host "   Format: [subdomain].serveo.net:5900"
        Write-Host "   Password: tigervnc"
        Write-Host ""
        Write-Host "🥉 Method 3 - RDP Backup:"
        Write-Host "   Check RDP backup URL above"
        Write-Host "   Username: runneradmin"
        Write-Host "   Password: TigerVNC123!"
        Write-Host "=================================="
        Write-Host "🐅 TigerVNC Instructions:"
        Write-Host "1. Open TigerVNC Viewer"
        Write-Host "2. Enter the URL from Method 1 or 2"
        Write-Host "3. Password: tigervnc"
        Write-Host "4. Enjoy Windows Desktop!"
        Write-Host "=================================="

    - name: 🔄 Keep Session Active
      run: |
        Write-Host "🟢 TigerVNC Session Active!"
        Write-Host "⏰ Started at: $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')"
        Write-Host "🐅 Multiple connection methods available!"
        Write-Host ""
        
        $startTime = Get-Date
        $endTime = $startTime.AddHours(6)
        
        while ((Get-Date) -lt $endTime) {
            $remaining = $endTime - (Get-Date)
            $hours = [math]::Floor($remaining.TotalHours)
            $minutes = $remaining.Minutes
            
            Write-Host "🟢 VNC Session Active - Time Remaining: $hours hours $minutes minutes"
            Write-Host "🐅 TigerVNC ready for connection!"
            Write-Host "📋 Try PlayIt.gg first, then SSH tunnel, then RDP backup"
            
            Start-Sleep -Seconds 300
        }
        
        Write-Host "⏰ Session ended. Run workflow again for new session!"
